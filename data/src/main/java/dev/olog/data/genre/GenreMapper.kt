package dev.olog.data.genre

import dev.olog.core.MediaUri
import dev.olog.core.author.Artist
import dev.olog.core.entity.MostPlayedSong
import dev.olog.core.genre.Genre
import dev.olog.core.track.Song

// TODO for some reason is not autogenerated
data class Genres_view(
    val id: String,
    val name: String,
    val songs: Long,
)

internal fun Genres_view.toDomain() = Genre(
    uri = MediaUri(
        source = MediaUri.Source.MediaStore,
        category = MediaUri.Category.Genre,
        id = id,
        isPodcast = false,
    ),
    name = name,
    songs = songs.toInt(),
)

internal fun Genres_playables_view.toDomain() = Song(
    uri = MediaUri(
        source = MediaUri.Source.MediaStore,
        category = MediaUri.Category.Track,
        id = id,
        isPodcast = false,
    ),
    artistUri = MediaUri(
        source = MediaUri.Source.MediaStore,
        category = MediaUri.Category.Author,
        id = author_id,
        isPodcast = false,
    ),
    albumUri = MediaUri(
        source = MediaUri.Source.MediaStore,
        category = MediaUri.Category.Collection,
        id = collection_id,
        isPodcast = false,
    ),
    title = title,
    artist = author,
    albumArtist = album_artist,
    album = collection,
    duration = duration,
    dateAdded = date_added,
    directory = directory,
    path = path,
    discNumber = disc_number,
    trackNumber = track_number,
    idInPlaylist = 0, // TODO remove
)

internal fun SelectRelatedArtists.toDomain() = Artist(
    uri = MediaUri(
        source = MediaUri.Source.MediaStore,
        category = MediaUri.Category.Author,
        id = author_id,
        isPodcast = false,
    ),
    name = author,
    songs = songs.toInt(),
)

internal fun SelectMostPlayed.toDomain() = MostPlayedSong(
    song = Song(
        uri = MediaUri(
            source = MediaUri.Source.MediaStore,
            category = MediaUri.Category.Track,
            id = id,
            isPodcast = false,
        ),
        artistUri = MediaUri(
            source = MediaUri.Source.MediaStore,
            category = MediaUri.Category.Author,
            id = author_id,
            isPodcast = false,
        ),
        albumUri = MediaUri(
            source = MediaUri.Source.MediaStore,
            category = MediaUri.Category.Collection,
            id = collection_id,
            isPodcast = false,
        ),
        title = title,
        artist = author,
        albumArtist = album_artist,
        album = collection,
        duration = duration,
        dateAdded = date_added,
        directory = directory,
        path = path,
        discNumber = disc_number,
        trackNumber = track_number,
        idInPlaylist = 0, // TODO remove
    ),
    counter = counter.toInt(),
)